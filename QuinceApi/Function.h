//
//  Function.h
//  quince
//
//  Created by max on 3/5/10.
//  Copyright 2010 Maximilian Marcoll. All rights reserved.
//
//
//	If you have any questions contact quince@maximilianmarcoll.de
//
//	This file is part of quince.
//
//	quince is free software: you can redistribute it and/or modify
//	it under the terms of the GNU General Public License as published by
//	the Free Software Foundation, either version 3 of the License, or
//	(at your option) any later version.
//
//	quince is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License
//	along with quince.  If not, see <http://www.gnu.org/licenses/>.
//

#import <Cocoa/Cocoa.h>

@class QuinceObject, QuinceDocument;

@interface Function : NSObject {

	NSMutableDictionary * dictionary;
	QuinceDocument * document;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(void)perform;
//				has to be overridden by subclasses
//				performs the actual task.
//
//
//				if the function should work on a selection in a view (that is: be invoked by the ‘selection’ menu)
//				(only possible with exactly one dictionary in ‘inputDescriptors’ and ‘QuinceObject’ as type for input)
//				this method should operate directly on the input object
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(NSMutableArray *)inputDescriptors;
//				
//				returns an array with one NSDictionary object for each input object needed for the function to operate.
//				each dictionary should contain one string describing the purpose of the input object for the key:@"purpose"
//					(e.g. @"grid" in case of a quantization function
//				and one string with the type of the input object for the key:@"type"
//					(e.g. @"QuinceObject")
//
//				the default implementation has one input of type @"QuinceObject" for the purpose @"source"
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(QuinceObject *)outputObjectOfType:(NSString *)type;
//
//				call this method if you need an Object as a result of your function.
//				you will get the designated result object, or a new empty object of the specified type if there was no 
//					result object given to your function
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(NSString *)outputType;
//
//				if your function creates a new object as a result which is not of type QuinceObject
//				you have to override this method to return the appropriate type (e.g. @"Envelope").
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(BOOL)needsInput;
//
//				if your function creates a new object and does not need any input objects, 
//				override this method to return NO. default is YES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(BOOL)hasInterface;
//
//				if your function has its own user interface, override this method to return YES. default is NO
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(QuinceObject *)objectForPurpose:(NSString *)purpose;
//
//				call this method to get an object serving your function as input for a specific purpose, 
//				defined by the inputDescriptors
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(void)setOutputObjectToObjectWithPurpose:(NSString *)purpose;
//
//				if your function does NOT create a new output object, but operates on a given object directly
//				call this method from your perform method with the purpose-key identifying the object you operate on
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(void)done;
//				you need to call this method when you are done processing your task!
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-(id)valueForKey:(NSString *)key;
-(void)setValue:(id)value forKey:(NSString *)key;
//
//				KVC
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//				don't care about these...
//
-(void)performActionWithInputDescriptors:(NSArray *)inputDescriptors;
-(void)reset;
-(void)setDocument:(QuinceDocument *)doc;
-(QuinceDocument *)document;
-(BOOL)typeCheckPurpose:(NSString *)purpose withType:(NSString *)type;
-(void)setIsCompatible:(BOOL)b;
-(NSDictionary *)dictionary;
-(BOOL)worksOnSelection;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@end
